// Prisma configuration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/type-graphql"
  emitOnly = "models"
}

// User related models and enums

enum UserRole {
  ADMIN
  USER
}

model User {
  id       String   @id @default(uuid())
  username String   @unique
  email    String   @unique
  role     UserRole @default(USER)

  /// @TypeGraphQL.omit(output: true)
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  matches        PlayerOnMatch[]
  currentMatches Match[]

  @@map("users")
}

// Match related models and enums

enum MatchState {
  WAITING
  PLAYING
  COMPLETE
}

model Match {
  id String @id @default(uuid())

  state        MatchState @default(WAITING)
  roundTimer   Int        @default(10)
  currentTimer Int        @default(0)
  match        Json

  currentPlayer   User   @relation(fields: [currentPlayerId], references: [id])
  currentPlayerId String

  players PlayerOnMatch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerOnMatch {
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String

  player   User   @relation(fields: [playerId], references: [id])
  playerId String

  totalScanners Int @default(0)
  totalMissiles Int @default(0)
  totalKills    Int @default(0)
  totalDeaths   Int @default(0)

  assignedAt DateTime @default(now())

  @@id([matchId, playerId])
}
